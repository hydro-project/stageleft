---
source: stageleft_macro/src/quote_impl/mod.rs
assertion_line: 128
expression: "prettyplease :: unparse(& wrapped)"
---
fn main() {
    {
        move |__stageleft_ctx: &_, __output: &mut ::stageleft::internal::QuotedOutput| {
            #[allow(unused, non_upper_case_globals, non_snake_case)]
            let x__free = {
                let _out = ::stageleft::runtime_support::FreeVariableWithContext::uninitialized(
                    &x,
                    __stageleft_ctx,
                );
                __output
                    .captures
                    .push(::stageleft::internal::Capture {
                        ident: "x__free",
                        tokens: ::stageleft::runtime_support::FreeVariableWithContext::to_tokens(
                            x,
                            __stageleft_ctx,
                        ),
                    });
                _out
            };
            if true {
                __output.module_path = module_path!();
                __output.crate_name = option_env!("STAGELEFT_FINAL_CRATE_NAME")
                    .unwrap_or(env!("CARGO_PKG_NAME"));
                __output.tokens = "{ let _ = x__free + 2 ; let _ = x__free + 2 ; }";
                #[allow(unused, non_upper_case_globals, non_snake_case)]
                ::std::mem::forget(x__free);
                unsafe {
                    return ::std::mem::MaybeUninit::uninit().assume_init();
                }
            }
            #[allow(unreachable_code, unused_qualifications)]
            {
                {
                    let _ = x__free + 2;
                    let _ = x__free + 2;
                }
            }
        }
    }
}
